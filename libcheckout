function checkout() {
  if [ -n "$SEMAPHORE_SNAPSHOT_ID" ]; then
    checkout::snapshot
    return 0
  fi

  if [ -z $SEMAPHORE_GIT_BRANCH ] || [ -z $SEMAPHORE_GIT_URL ] || [ -z $SEMAPHORE_GIT_DIR ] || [ -z $SEMAPHORE_GIT_SHA ]; then
    checkout::validation_message
    return 1
  fi

  if [ "$1" = "--use-cache" ]; then
    echo "[Experimental stability] Using cached Git repository."
    checkout::use_cache
  else
    checkout::shallow
  fi
}

function checkout::validation_message() {
  echo "[CHECKOUT ERROR] Some of these variables are unset:"
  echo "SEMAPHORE_GIT_URL=$SEMAPHORE_GIT_URL"
  echo "SEMAPHORE_GIT_DIR=$SEMAPHORE_GIT_DIR"
  echo "SEMAPHORE_GIT_BRANCH=$SEMAPHORE_GIT_BRANCH"
  echo "SEMAPHORE_GIT_SHA=$SEMAPHORE_GIT_SHA"
}

function checkout::snapshot() {
  echo SEMAPHORE_SNAPSHOT_ID: $SEMAPHORE_SNAPSHOT_ID

  WORKDIR=snapshot
  mkdir -p ~/$WORKDIR
  cd ~/$WORKDIR

  DOMAIN=snapshots.semaphoreci.com
  URL="https://$DOMAIN/api/v1alpha/snapshots/$SEMAPHORE_SNAPSHOT_ID"
  AUTH_HEADER="Authorization: Token omsAfx8Ly51RJ127xX6c"
  curl $URL -H "$AUTH_HEADER" | tar xzf -
}

function checkout::use_cache() {
  cache restore git-cache-

  if [ -d "$HOME/$SEMAPHORE_GIT_DIR" ]; then
    checkout::fetch
  else
    checkout::clone
  fi

  checkout::cache_store
}

function checkout::fetch() {
  local branch_ref="refs/heads/$SEMAPHORE_GIT_BRANCH"
  local branch_origin="origin/$SEMAPHORE_GIT_BRANCH"

  echo "Restored cache"
  cd $HOME/$SEMAPHORE_GIT_DIR
  git remote prune origin
  git fetch --tags origin

  if [[ -n $(git show-ref $branch_ref) ]]; then
    git checkout $SEMAPHORE_GIT_BRANCH
  else
    git checkout -b $SEMAPHORE_GIT_BRANCH -t $branch_origin;
  fi

  git reset --hard $SEMAPHORE_GIT_SHA
}

function checkout::clone() {
  git clone $SEMAPHORE_GIT_URL $SEMAPHORE_GIT_DIR
  cd $SEMAPHORE_GIT_DIR
  git checkout $SEMAPHORE_GIT_BRANCH
  git reset --hard $SEMAPHORE_GIT_SHA
}

function checkout::cache_store() {
  # update cache if older then 72h -> 25920s
  if [ -z ${SEMAPHORE_GIT_CACHE_AGE} ]; then
    SEMAPHORE_GIT_CACHE_AGE=259200
  fi

  local cache_key=$(cache list 2>&1 | grep git-cache- | awk '{ print $1 }' | head -1)
  local cache_age=$(echo $cache_key | cut -d'-' -f8)

  if [[ ! -z "$cache_age" ]] && [[ $cache_age =~ ^[0-9]+$ ]]; then
    local now=$(date +%s)
    local diff=$(expr $now - $cache_age)
    echo "diff: $diff"
    if (( diff > $SEMAPHORE_GIT_CACHE_AGE )); then
      echo "Git cache outdated, refreshing..."
      cd ..
      checkout::cleanupcache
      cache store "git-cache-$SEMAPHORE_JOB_ID-`date +%s`" $SEMAPHORE_GIT_DIR
      cd $SEMAPHORE_GIT_DIR
    else
      echo "Git cache up-to-data."
    fi
  else
    echo "No git cache... caching"
    cd ..
    cache store "git-cache-${SEMAPHORE_JOB_ID}-`date +%s`" $SEMAPHORE_GIT_DIR
    cd $SEMAPHORE_GIT_DIR
  fi
}

function checkout::cleanupcache {
  if [ -z ${SEMAPHORE_GIT_CACHE_KEEP} ]; then
    SEMAPHORE_GIT_CACHE_KEEP=0
  fi
  local k=$SEMAPHORE_GIT_CACHE_KEEP
  local list=($(cache list 2>&1 | grep git-cache- | awk '{ print $1 }' | xargs))

  for i in ${list[@]:$k}; do
    cache delete $i
  done

}

function checkout::shallow() {
  if [ -z ${SEMAPHORE_GIT_DEPTH} ]; then
    SEMAPHORE_GIT_DEPTH=50
  fi
  echo "Performin shallow clone with depth: $SEMAPHORE_GIT_DEPTH"
  git clone --depth $SEMAPHORE_GIT_DEPTH -b $SEMAPHORE_GIT_BRANCH $SEMAPHORE_GIT_URL $SEMAPHORE_GIT_DIR 2>/dev/null
  if [ $? -ne 0 ]; then
    echo "Branch not found perfoming full clone"
    git clone $SEMAPHORE_GIT_URL $SEMAPHORE_GIT_DIR
    cd $SEMAPHORE_GIT_DIR
    git reset --hard $SEMAPHORE_GIT_SHA 2>/dev/null
  else
    cd $SEMAPHORE_GIT_DIR
    git reset --hard $SEMAPHORE_GIT_SHA 2>/dev/null
    if [ $? -ne 0 ]; then
      "SHA: $SEMAPHORE_GIT_SHA not found perfoming full clone"
      git fetch --unshallow
      git reset --hard $SEMAPHORE_GIT_SHA
    fi
  fi
}

export -f checkout
