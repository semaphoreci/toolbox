function checkout() {
  local use_cache=${1:-""}
  if [ -z $SEMAPHORE_GIT_BRANCH ] || [ -z $SEMAPHORE_GIT_URL ] || [ -z $SEMAPHORE_GIT_DIR ] || [ -z $SEMAPHORE_GIT_SHA ]; then
    checkout::validation_message
    return 1
  fi

  rm -rf "$SEMAPHORE_GIT_DIR"

  if [ "$use_cache" = "--use-cache" ]; then
    echo "[Experimental stability] Using cached Git repository."
    checkout::use_cache
  else
    if [ ! -z ${SEMAPHORE_GIT_REF_TYPE:-} ]; then
      checkout::refbased
    else
      checkout::shallow
    fi
  fi
}

function checkout::validation_message() {
  echo "[CHECKOUT ERROR] Some of these variables are unset:"
  echo "SEMAPHORE_GIT_URL=$SEMAPHORE_GIT_URL"
  echo "SEMAPHORE_GIT_DIR=$SEMAPHORE_GIT_DIR"
  echo "SEMAPHORE_GIT_BRANCH=$SEMAPHORE_GIT_BRANCH"
  echo "SEMAPHORE_GIT_SHA=$SEMAPHORE_GIT_SHA"
}

function checkout::use_cache() {
  export CACHE_FAIL_ON_ERROR="true"
  cache restore git-cache-

  if [ "$?" -ne "0" ]; then
    echo "Failed to restore from the cache"
    rm -rf $SEMAPHORE_GIT_DIR
  fi

  if [ -d "$HOME/$SEMAPHORE_GIT_DIR" ]; then
    checkout::fetch
  else
    checkout::clone
  fi

  if [ "$?" -eq "0" ]; then
    checkout::cache_store
  else
    return 1
  fi
}

function checkout::fetch() {
  echo "Restored cache"
  cd $HOME/$SEMAPHORE_GIT_DIR
  git remote prune origin
  retry git fetch --tags origin

  checkout::switch_revision
}

function checkout::clone() {
  retry git clone $SEMAPHORE_GIT_URL $SEMAPHORE_GIT_DIR
  cd $SEMAPHORE_GIT_DIR

  checkout::switch_revision
}

function checkout::reset_to_sha {
  checkout::checkrevision
  if [ "$?" -eq "0" ]; then
    git reset --hard $SEMAPHORE_GIT_SHA 2>/dev/null
    checkout::metric "$(du -s . | awk '{ print $1 }')"
    return 0
  else
    return 1
  fi
}

function checkout::switch_revision() {
  if [ ${SEMAPHORE_GIT_REF_TYPE:-""} = "pull-request" ]; then
    retry git fetch origin +$SEMAPHORE_GIT_REF: 2>/dev/null
    if [ $? -ne 0 ]; then
      echo "Reference: ${SEMAPHORE_GIT_REF} not found .... Exiting"

      return 1
    else
      checkout::reset_to_sha
    fi

  elif [ ${SEMAPHORE_GIT_REF_TYPE:-""} = "tag" ]; then
    git checkout -qf $SEMAPHORE_GIT_TAG_NAME
    if [ $? -ne 0 ]; then
      echo "Release $SEMAPHORE_GIT_TAG_NAME not found .... Exiting"

      return 1
    else
      checkout::metric "$(du -s . | awk '{ print $1 }')"
      echo "HEAD is now at ${SEMAPHORE_GIT_SHA} Release ${SEMAPHORE_GIT_TAG_NAME}"

      return 0
    fi

  else
    local branch_ref="refs/heads/$SEMAPHORE_GIT_BRANCH"
    local branch_origin="origin/$SEMAPHORE_GIT_BRANCH"

    if [[ -n $(git show-ref $SEMAPHORE_GIT_REF) ]]; then
      git checkout $SEMAPHORE_GIT_BRANCH
    else
      git checkout -b $SEMAPHORE_GIT_BRANCH -t $branch_origin;
    fi

    checkout::reset_to_sha
  fi
}

function checkout::cache_store() {
  # update cache if older then 72h -> 25920s
  if [ -z ${SEMAPHORE_GIT_CACHE_AGE:-""} ]; then
    SEMAPHORE_GIT_CACHE_AGE=259200
  fi

  local cache_key=$(cache list 2>&1 | grep git-cache- | awk '{ print $1 }' | head -1)
  local cache_age=$(echo $cache_key | cut -d'-' -f8)

  if [[ ! -z "$cache_age" ]] && [[ $cache_age =~ ^[0-9]+$ ]]; then
    local now=$(date +%s)
    local diff=$(expr $now - $cache_age)
    echo "diff: $diff"
    if (( diff > $SEMAPHORE_GIT_CACHE_AGE )); then
      echo "Git cache outdated, refreshing..."
      cd ..
      checkout::cleanupcache
      cache store "git-cache-$SEMAPHORE_JOB_ID-`date +%s`" $SEMAPHORE_GIT_DIR
      cd $SEMAPHORE_GIT_DIR
    else
      echo "Git cache up-to-data."
    fi
  else
    echo "No git cache... caching"
    cd ..
    cache store "git-cache-${SEMAPHORE_JOB_ID}-`date +%s`" $SEMAPHORE_GIT_DIR
    cd $SEMAPHORE_GIT_DIR
  fi
}

function checkout::cleanupcache {
  if [ -z ${SEMAPHORE_GIT_CACHE_KEEP:-""} ]; then
    SEMAPHORE_GIT_CACHE_KEEP=0
  fi
  local k=$SEMAPHORE_GIT_CACHE_KEEP
  local list=($(cache list 2>&1 | grep git-cache- | awk '{ print $1 }' | xargs))

  for i in ${list[@]:$k}; do
    cache delete $i
  done

}

function checkout::checkrevision {
  git rev-list HEAD..$SEMAPHORE_GIT_SHA 2>/dev/null
  if [ $? -ne 0 ]; then
    echo "Revision: ${SEMAPHORE_GIT_SHA} not found .... Exiting"
    return 1
  fi
}

function checkout::branch_checkout {
  git checkout -f "$SEMAPHORE_GIT_BRANCH"
  if [ $? -ne 0 ]; then
    echo "Branch: ${SEMAPHORE_GIT_BRANCH} not found .... Exiting"
    return 1
  fi
}

function checkout::shallow() {
  if [ -z ${SEMAPHORE_GIT_DEPTH:-""} ]; then
    SEMAPHORE_GIT_DEPTH=50
  fi
  echo "Performing shallow clone with depth: $SEMAPHORE_GIT_DEPTH"
  retry git clone --depth $SEMAPHORE_GIT_DEPTH -b $SEMAPHORE_GIT_BRANCH $SEMAPHORE_GIT_URL $SEMAPHORE_GIT_DIR
  if [ $? -ne 0 ]; then
    echo "Branch not found performing full clone"
    retry git clone $SEMAPHORE_GIT_URL $SEMAPHORE_GIT_DIR
    cd "$SEMAPHORE_GIT_DIR"
    checkout::branch_checkout
    if [ $? -ne 0 ]; then
      return 1
    fi
    checkout::checkrevision
    if [ "$?" -eq "0" ]; then
      git reset --hard $SEMAPHORE_GIT_SHA 2>/dev/null
    else
      return 1
    fi
  else
    cd $SEMAPHORE_GIT_DIR
    git reset --hard $SEMAPHORE_GIT_SHA 2>/dev/null
    if [ $? -ne 0 ]; then
      echo "SHA: $SEMAPHORE_GIT_SHA not found performing full clone"
      retry git fetch --unshallow
      checkout::checkrevision
      if [ "$?" -eq "0" ]; then
        git reset --hard $SEMAPHORE_GIT_SHA 2>/dev/null
      else
        return 1
      fi
    fi
  fi

  checkout::metric "$(du -s . | awk '{ print $1 }')"
}

function checkout::refbased() {
  if [ -z ${SEMAPHORE_GIT_DEPTH:-""} ]; then
    SEMAPHORE_GIT_DEPTH=50
  fi

  if [ ${SEMAPHORE_GIT_REF_TYPE:-""} = "pull-request" ]; then
    retry git clone --depth $SEMAPHORE_GIT_DEPTH $SEMAPHORE_GIT_URL $SEMAPHORE_GIT_DIR
    cd $SEMAPHORE_GIT_DIR
    retry git fetch origin +$SEMAPHORE_GIT_REF: 2>/dev/null
    if [ $? -ne 0 ]; then
      echo "Revision: ${SEMAPHORE_GIT_SHA} not found .... Exiting"

      return 1
    else
      git checkout -qf FETCH_HEAD
      echo "HEAD is now at ${SEMAPHORE_GIT_SHA}"

      return 0
    fi
  fi

  if [ ${SEMAPHORE_GIT_REF_TYPE:-""} = "tag" ]; then
    retry git clone --depth $SEMAPHORE_GIT_DEPTH -b $SEMAPHORE_GIT_TAG_NAME $SEMAPHORE_GIT_URL $SEMAPHORE_GIT_DIR
    if [ $? -ne 0 ]; then
      echo "Release $SEMAPHORE_GIT_TAG_NAME not found .... Exiting"

      return 1
    else
      cd $SEMAPHORE_GIT_DIR
      git checkout -qf $SEMAPHORE_GIT_TAG_NAME
      echo "HEAD is now at ${SEMAPHORE_GIT_SHA} Release ${SEMAPHORE_GIT_TAG_NAME}"

      return 0
    fi
  fi

  checkout::shallow
}

function checkout::metric() {
  if [[ "${SEMAPHORE_TOOLBOX_METRICS_ENABLED:-''}" == "true" ]]; then
    echo "libcheckout_repo_size $1" >> /tmp/toolbox_metrics
  fi
}

export -f checkout
