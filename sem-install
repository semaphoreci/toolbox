#!/bin/bash

install::package_url() {
  DIST=$(uname)
  case $DIST in 
    Linux)
      echo "http://packages.semaphoreci.com/$(lsb_release -cs)"
      ;;
    Darwin)
      echo "http://packages.semaphoreci.com/mac"
      ;;
    *)
    echo "Unsupported distro $DIST"
    exit 1
    ;;
  esac
}

install::available() {
  response=$(curl --write-out %{http_code} --head --silent --output /dev/null $(install::package_url)/${language}/${language_version}.tar.gz)
  if [[ $response -ne 200 ]]; then
    echo 1
  else
    echo 0
  fi
}

install::download() {
  curl --silent $(install::package_url)/${language}/${language_version}.tar.gz --output ${language_version}.tar.gz
}

install::install_node() {
  NVM_NODEJS_ORG_MIRROR=https://nodejs.semaphoreci.com/dist nvm install ${language_version}
  nvm use ${language_version}
  npm install -g grunt-cli
  result="$?"
  sudo ln -fs "$(which node)" /usr/bin/nodejs
  return $result
}
install::install_ruby() {
  if [[ $(install::available) -eq 1 ]] ; then
    rbenv install -s ${language_version}
    rbenv global ${language_version}
    gem update system
    gem install bundler:2.0.1 --no-document
  else
    install::download
    tar -zxf ${language_version}.tar.gz
    rm -rf ${language_version}.tar.gz
    mv ${language_version} ~/.rbenv/versions/
  fi
  rbenv rehash
  return $?
}
install::install_erlang() {
  if [[ $(install::available) -eq 1 ]] ; then
    export KERL_BUILD_BACKEND=git
    export OTP_GITHUB_URL='https://github.com/erlang/otp'
    kerl update releases
    kerl build "${language_version}" "${language_version}"
    kerl install "${language_version}" ~/.kerl/installs/"${language_version}"
    echo ""${language_version}" /home/semaphore/.kerl/installs/"${language_version}"">> ~/.kerl/otp_installations
  else
    install::download
    tar -zxf ./"${language_version}".tar.gz && rm -rf ./"${language_version}".tar.gz
    mv ./"${language_version}" ~/.kerl/installs/
    echo ""${language_version}" /home/semaphore/.kerl/installs/"${language_version}"">> ~/.kerl/otp_installations
  fi
  return $?
}

install::install_elixir() {
  response1=$(curl --write-out %{http_code} --head --silent --output /dev/null $(install::package_url)/${language}/elixirs_${language_version}.tar.gz)
  response2=$(curl --write-out %{http_code} --head --silent --output /dev/null $(install::package_url)/${language}/archives_${language_version}.tar.gz)
  case ${language_version} in
      "1.7"* | "1.8"* | "1.9"* | "1.10"*)
        local erlang_version="22.3"
        ;;
      "1.11"*)
        local erlang_version="23.3"
        ;;
      "1.12"*)
        local erlang_version="24.2"
        ;;
      "1.13"*)
        local erlang_version="24.2"
        ;;
      *)
        echo "Installation of '${language}' version '${language_version}' is not yet supported"
        return 1;
        ;;
  esac
  if [[ $(kerl list installations) != *"${erlang_version}"* ]]; then 
    language_before=${language}
    language_version_before=${language_version}
    language="erlang"
    language_version=${erlang_version}
    install::install_erlang
    language=${language_before}
    language_version=${language_version_before}
  fi
  if [[ $response1 -ne 200 ]] || [[ $response2 -ne 200 ]]; then
    . ~/.kerl/installs/${erlang_version}/activate
    kiex install ${language_version}
    kiex use ${language_version}
    mix local.hex --force
  else
    curl --silent $(install::package_url)/${language}/elixirs_${language_version}.tar.gz --output elixirs_${language_version}.tar.gz
    curl --silent $(install::package_url)/${language}/archives_${language_version}.tar.gz --output archives_${language_version}.tar.gz
    tar -zxf elixirs_${language_version}.tar.gz && rm -rf elixirs_${language_version}.tar.gz
    tar -zxf archives_${language_version}.tar.gz && rm -rf archives_${language_version}.tar.gz
    mv ./elixirs/*${language_version}* ~/.kiex/elixirs/
    mv ./elixirs/.*${language_version}* ~/.kiex/elixirs/
    mv ./archives/*${language_version} ~/.kiex/mix/archives/
    rm -rf ./archives && rm -rf ./elixirs
  fi
  return $?
}

install::install_php() {
  if [[ $(install::available) -eq 1 ]] ; then
    phpbrew known -u
    phpbrew -q install -j 4 ${language_version} +default +dbs +openssl -- --with-curl=/usr/local
    phpbrew switch ${language_version}
    echo "date.timezone = UTC" >> ~/.phpbrew/php/php-${language_version}/etc/php.ini
    phpbrew ext install imap -- --with-kerberos --with-imap-ssl
    phpbrew ext install gd -- --enable-gd-native-ttf --with-freetype-dir=/usr/lib/x86_64-linux-gnu
    phpbrew ext install imagick
    phpbrew ext install intl
    wget https://getcomposer.org/composer-stable.phar -O ~/.phpbrew/php/php-${language_version}/bin/composer.phar
    echo '#!/usr/bin/env bash' >> ~/.phpbrew/php/php-${language_version}/bin/composer
    echo "~/.phpbrew/php/php-${language_version}/bin/php ~/.phpbrew/php/php-${language_version}/bin/composer.phar \$@" >> ~/.phpbrew/php/php-${language_version}/bin/composer
    chmod +x ~/.phpbrew/php/php-${language_version}/bin/composer
  else
    install::download
    tar -zxf ${language_version}.tar.gz
    rm -rf ${language_version}.tar.gz
    mv php-${language_version} ~/.phpbrew/php/
    if [ ! -d "~/.phpbrew/build/php-{$language_version}" ]; then
      output=$(phpbrew download ${language_version} | tail -n1|awk -F'/' '{print $NF}')
      if [[ ! -z "$output" ]]; then
        tar -xjf ~/.phpbrew/distfiles/${output} -C ~/.phpbrew/build/
      fi
    fi
  fi
  return $?
}

install::usage() {
  echo -e "
Usage:
  sem-install [LANGUAGE] [VERSION]"
}

install::err() {
  echo -e "\n! [$(version::date)]: $@" >&2

  return 1
}

sem-install() {
  if ! [[ $# -eq 2 ]]; then
    install::usage
    install::err "Unsupported number of arguments provided!"

    return $?
  fi

  language=$1
  language_version=$2

  case $language in
    elixir)
      install::install_elixir
      ;;
    erlang)
      install::install_erlang
      ;;
    php)
      install::install_php
      ;;
    ruby)
      install::install_ruby
      ;;
    node)
      install::install_node
      ;;


    *)
      install:err "Installation of '${language}' is not yet supported"
      return 1;
      ;;
  esac
}
