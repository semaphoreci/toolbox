version: v1.0
name: Toolbox S2 project
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

blocks:
  - name: Run Tests
    task:
      prologue:
        commands:
          - checkout
          - cd ../
          - rm -rf .toolbox/
          - mv toolbox/ .toolbox
          - bash .toolbox/install-toolbox
          - source .toolbox/toolbox
          - cd .toolbox
      jobs:
      - name: Test artifact CLI installation
        commands:
          - ls artifact.tar.gz || true
          - artifact | grep "Semaphore 2.0 Artifact CLI"

      - name: Bats tests
        commands:
          - cache clear
          - sudo apt-get install -y python3.8-dev
          - sem-version python 3.8
          - sem-version go 1.12
          - git submodule init && git submodule update
          - sudo ./tests/support/bats-core/install.sh /usr/local
          - bats tests/autocache.bats
          - bats tests/cache.bats
          - bats tests/libcheckout.bats
          - bats tests/base.bats

      - name: Sem version tests
        commands:
          - sem-version ruby 2.5.3
          - ruby --version | grep 2.5.3
          - sem-version ruby 2.5.2
          - ruby --version | grep 2.5.2
          - sem-version ruby 2.5.3
          - ruby --version | grep 2.5.3
          - sem-version ruby 2.3.7
          - ruby --version | grep 2.3.7
          - sem-version c 8
          - gcc --version | grep 8.3.0
          - sem-version cpp 7
          - gcc --version | grep 7.5
          - sem-version php 7.2.10
          - php -v | grep 7.2.10
          - sem-version php 7.0.32
          - php -v | grep 7.0.32

      - name: MySQL
        commands:
          - sem-service start mysql
          - mysql --host=0.0.0.0 -uroot -e "create database fooo"
          - mysql --host=0.0.0.0 -uroot -e "show databases" | grep fooo
          - mysql --host=0.0.0.0 -uroot -e 'SHOW VARIABLES like "version";' | grep 5.6
          - sem-service status mysql
          - sem-service stop mysql
          - sem-service start mysql 5.7
          - mysql --host=0.0.0.0 -uroot -e "create database fooo"
          - mysql --host=0.0.0.0 -uroot -e "show databases" | grep fooo
          - mysql --host=0.0.0.0 -uroot -e 'SHOW VARIABLES like "version";' | grep 5.7
          - sem-service status mysql
          - sem-service stop mysql
          - sem-service start mysql 8.0.19 --username=test --password=test --garbage else
          - mysql  -utest -ptest -e "show databases"
          - mysql  -utest -ptest -e 'SHOW VARIABLES like "version";'
          - sem-service stop mysql

      - name: PostgreSQL
        commands:
          - sem-service start postgres
          - createdb -U postgres -h 0.0.0.0 fooo
          - psql -h 0.0.0.0 -U postgres -c "\l" | grep fooo
          - psql -h 0.0.0.0 -U postgres -c "SELECT version()" | grep 9.6
          - sem-service status postgres
          - sem-service stop postgres
          - sem-service start postgres 11
          - createdb -U postgres -h 0.0.0.0 fooo
          - psql -h 0.0.0.0 -U postgres -c "\l" | grep fooo
          - psql -h 0.0.0.0 -U postgres -c "SELECT version()" | grep 11
          - sem-service status postgres
          - sem-service stop postgres
          - sem-service start postgres 11 --username=xxx --password=xxx --db=xxx --garbage else
          - createdb -U xxx  -h 0.0.0.0 fooo
          - psql -h 0.0.0.0 -U xxx -c "\l"
          - psql -U xxx -c "SELECT version()" | grep 11
          - sem-service status postgres

      - name: Redis
        commands:
          - sem-service start redis
          - sem-service status redis
          - sem-service stop redis
          - sem-service start redis 5
          - sem-service status redis

      - name: Memcached
        commands:
          - sem-service start memcached
          - sem-service status memcached

      - name: RabbitMQ
        commands:
          - sem-service start rabbitmq
          - sem-service status rabbitmq

      - name: mongodb
        commands:
          - sudo apt-get install -y mongodb-clients
          - sem-service start mongodb
          - curl http://localhost:27017 | grep "It looks like you are trying to access MongoDB over HTTP on the native driver port."
          - sem-service status mongodb
          - sem-service stop mongodb
          - sem-service start mongodb 3.2
          - curl http://localhost:27017 | grep "It looks like you are trying to access MongoDB over HTTP on the native driver port."
          - sem-service status mongodb
          - sem-service stop mongodb
          - sem-service stop mongodb
          - sem-service start mongodb 4.2 --username=xxx --password=xxx
          - echo "show dbs" | mongo -u "xxx" -p "xxx" 127.0.0.1  --authenticationDatabase "admin"

      - name: elasticsearch
        commands:
          - sem-service start elasticsearch
          - curl -XGET '0.0.0.0:9200/_cluster/health?pretty' | grep green
          - sem-service status elasticsearch
          - curl -XGET '0.0.0.0:9200' | grep 6.5.1
          - sem-service stop elasticsearch
          - sem-service start elasticsearch 6.5.2
          - curl -XGET '0.0.0.0:9200/_cluster/health?pretty' | grep green
          - sem-service status elasticsearch
          - curl -XGET '0.0.0.0:9200' | grep 6.5.2
          - sem-service stop elasticsearch

      - name: cassandra
        commands:
          - sem-service start cassandra
          - docker ps -a | grep cassandra


      - name: rethinkdb
        commands:
          - sem-service start rethinkdb
          - docker ps -a | grep rethinkdb 

      - name: Erlang change test
        commands:
          - echo "Erlang version"
          - erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'  -noshell
          - sem-version erlang 20
          - erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'  -noshell
          - sem-version erlang 21
          - erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'  -noshell

      - name: scala change test
        commands:
          - echo "actual scala version"
          - scala -version
          - sem-version scala 2.11
          - sem-version scala 2.12

  - name: Run tests in MacOS env
    task:
      agent:
          machine:
            type: a1-standard-4
            os_image: macos-mojave-xcode11
      jobs:
      - name: Bats tests
        commands:
          - checkout
          - cd ../
          - rm -rf .toolbox/
          - mv toolbox/ .toolbox
          - bash .toolbox/install-toolbox
          - source .toolbox/toolbox
          - cd .toolbox
          - git submodule init && git submodule update
          - sudo ./tests/support/bats-core/install.sh /usr/local
          - bats tests/macos_cache.bats
          - bats tests/macos_autocache.bats
          - bats tests/libcheckout.bats
      - name: Test artifact CLI installation macOS
        commands:
          - checkout
          - cd ../
          - rm -rf .toolbox/
          - mv toolbox/ .toolbox
          - bash .toolbox/install-toolbox
          - source .toolbox/toolbox
          - cd .toolbox
          - ls artifact.tar.gz || true
          - artifact | grep "Semaphore 2.0 Artifact CLI"

  - name: Run tests in Semaphoreci Docker container
    task:
      agent:
          machine:
            type: e1-standard-2
          containers:
            - name: main
              image: semaphoreci/ruby:2.6.2
      jobs:
      - name: Test Docker Image
        commands:
          - checkout
          - cd ../
          - rm -rf .toolbox/
          - mv toolbox/ .toolbox
          - bash .toolbox/install-toolbox
          - source .toolbox/toolbox
          - cd .toolbox
          - git submodule init && git submodule update
          - ./tests/support/bats-core/install.sh /usr/local
          - bats tests/cache.bats
          - bats tests/libcheckout.bats

  - name: Run tests in Docker container
    task:
      agent:
          machine:
            type: e1-standard-2
          containers:
            - name: main
              image: semaphoreci/alpine:3.9
      jobs:
      - name: Test Alpine Image
        commands:
          - checkout
          - cd ../
          - rm -rf .toolbox/
          - mv toolbox/ .toolbox
          - bash .toolbox/install-toolbox
          - source .toolbox/toolbox
          - cd .toolbox
          - git submodule init && git submodule update
          - ./tests/support/bats-core/install.sh /usr/local
          - bats tests/cache.bats
          - bats tests/libcheckout.bats
