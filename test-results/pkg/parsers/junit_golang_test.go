package parsers

import (
	"testing"

	"github.com/semaphoreci/toolbox/test-results/pkg/parser"
)

func Test_JUnitGoLang_CommonParse(t *testing.T) {
	parserWants := map[string]parser.TestResults{
		"empty": {
			ID:         "",
			Name:       "",
			Framework:  "",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    0,
				Passed:   0,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "error",
			StatusMessage: "EOF",
			Suites:        []parser.Suite{},
		},
		"basic": {
			ID:         "69cd6757-6b3d-30ca-bb19-0b892b4f399e",
			Name:       "Golang Suite",
			Framework:  "golang",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    3,
				Passed:   3,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "success",
			StatusMessage: "",
			Suites: []parser.Suite{
				{
					ID:         "57959178-09f2-30bd-ad59-bef48adce2bb",
					Name:       "foo",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    3,
						Passed:   3,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "6873a1b1-7da8-3fe1-b08d-1695c5fee6eb",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "fcb2a9a2-0bbc-3151-9e80-a51d5dde9911",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "6873a1b1-7da8-3fe1-b08d-1695c5fee6eb",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
			},
		},
		"multi-suite": {
			ID:         "488d730c-9521-3018-acd2-ce18a75a7077",
			Name:       "ff",
			Framework:  "golang",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    10,
				Passed:   10,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "success",
			StatusMessage: "",
			Suites: []parser.Suite{
				{
					ID:         "618eb6d2-8166-317a-a050-6ad11e07ca06",
					Name:       "foo",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "b13cacea-737b-3230-97e3-ae52a6189811",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "f9006f90-a341-396a-9003-799f50228f2e",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "618eb6d2-8166-317a-a050-6ad11e07ca06",
					Name:       "1234",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "b13cacea-737b-3230-97e3-ae52a6189811",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "f9006f90-a341-396a-9003-799f50228f2e",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "618eb6d2-8166-317a-a050-6ad11e07ca06",
					Name:       "",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "b13cacea-737b-3230-97e3-ae52a6189811",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "f9006f90-a341-396a-9003-799f50228f2e",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "4d4f9483-afc4-3e47-97f7-e216ec50f225",
					Name:       "1235",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "dc4fbbdf-b51d-3892-b431-5b5ae1b62edb",
							File:      "foo/bar:123",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "161480c3-8d4f-3225-9278-6233a50527b5",
							File:      "foo/baz",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "b7188c45-d812-35bd-ad23-cceaed6bbbc8",
					Name:       "diff by classname",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "a288b576-ebf4-312d-81ac-6ca5f78aba93",
							File:      "foo/bar",
							Classname: "foo",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "2ae85bd1-6ea3-3b82-8ee7-494f378b238e",
							File:      "foo/bar",
							Classname: "bar",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
			},
		},
		"invalid-root": {
			ID:         "",
			Name:       "",
			Framework:  "",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    0,
				Passed:   0,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "error",
			StatusMessage: "Invalid root element found: <nontestsuites>, must be one of <testsuites>, <testsuite>",
			Suites:        []parser.Suite{},
		},
	}

	testCases := buildParserTestCases(commonParserTestCases, parserWants)
	runParserTests(t, NewJUnitGoLang(), testCases)
}

func Test_JUnitGoLang_SpecificParse(t *testing.T) {
	specificParserTestCases := map[string]string{}
	parserWants := map[string]parser.TestResults{}

	testCases := buildParserTestCases(specificParserTestCases, parserWants)
	runParserTests(t, NewJUnitGoLang(), testCases)
}
