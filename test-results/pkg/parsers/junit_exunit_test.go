package parsers

import (
	"testing"

	"github.com/semaphoreci/toolbox/test-results/pkg/parser"
)

func Test_JUnitExUnit_CommonParse(t *testing.T) {
	parserWants := map[string]parser.TestResults{
		"empty": {
			ID:         "",
			Name:       "",
			Framework:  "",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    0,
				Passed:   0,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "error",
			StatusMessage: "EOF",
			Suites:        []parser.Suite{},
		},
		"basic": {
			ID:         "b37fd0fa-7cfa-3b6b-a992-67b61d24b79f",
			Name:       "Exunit Suite",
			Framework:  "exunit",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    3,
				Passed:   3,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "success",
			StatusMessage: "",
			Suites: []parser.Suite{
				{
					ID:         "3e3fd52e-60da-3a34-ace5-e69db05bc15e",
					Name:       "foo",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    3,
						Passed:   3,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "45f44cee-c48f-394e-ac8b-dcbb23e1a942",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "6c196f52-d10d-3b0f-b678-3faf8dcb851c",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "45f44cee-c48f-394e-ac8b-dcbb23e1a942",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
			},
		},
		"multi-suite": {
			ID:         "09cccd60-46cb-31a4-846f-c8329a1164f9",
			Name:       "ff",
			Framework:  "exunit",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    10,
				Passed:   10,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "success",
			StatusMessage: "",
			Suites: []parser.Suite{
				{
					ID:         "46c015b1-a078-3514-8beb-a2b7f4c74cd8",
					Name:       "foo",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "a28f667a-0ee9-3abe-908f-8190a584cace",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "b01309a9-94a3-3831-a8c5-c8798692c567",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "46c015b1-a078-3514-8beb-a2b7f4c74cd8",
					Name:       "1234",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "a28f667a-0ee9-3abe-908f-8190a584cace",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "b01309a9-94a3-3831-a8c5-c8798692c567",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "46c015b1-a078-3514-8beb-a2b7f4c74cd8",
					Name:       "",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "a28f667a-0ee9-3abe-908f-8190a584cace",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "b01309a9-94a3-3831-a8c5-c8798692c567",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "b2ca06e8-bc26-3b78-bd36-80c7889331eb",
					Name:       "1235",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "4f3da13d-5e4f-38e6-ae5b-fb308ef1a98d",
							File:      "foo/bar:123",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "b63d1827-b824-3ba3-a85f-26f5fc3fcb3e",
							File:      "foo/baz",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "450a281c-92b2-323d-b8e2-9fe85868d5b4",
					Name:       "diff by classname",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "9ef66f37-f5e6-3fec-b062-57c47e8d73db",
							File:      "foo/bar",
							Classname: "foo",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "145c69a5-fccd-330d-a99d-472da62ea30e",
							File:      "foo/bar",
							Classname: "bar",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
			},
		},
		"invalid-root": {
			ID:         "",
			Name:       "",
			Framework:  "",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    0,
				Passed:   0,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "error",
			StatusMessage: "Invalid root element found: <nontestsuites>, must be one of <testsuites>, <testsuite>",
			Suites:        []parser.Suite{},
		},
	}

	testCases := buildParserTestCases(commonParserTestCases, parserWants)
	runParserTests(t, NewJUnitExUnit(), testCases)
}

func Test_JUnitExUnit_SpecificParse(t *testing.T) {
	specificParserTestCases := map[string]string{}
	parserWants := map[string]parser.TestResults{}

	testCases := buildParserTestCases(specificParserTestCases, parserWants)
	runParserTests(t, NewJUnitExUnit(), testCases)
}
