package parsers

import (
	"testing"

	"github.com/semaphoreci/toolbox/test-results/pkg/parser"
)

func Test_JUnitGeneric_CommonParse(t *testing.T) {
	parserWants := map[string]parser.TestResults{
		"empty": {
			ID:         "",
			Name:       "",
			Framework:  "",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    0,
				Passed:   0,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "error",
			StatusMessage: "EOF",
			Suites:        []parser.Suite{},
		},
		"basic": {
			ID:         "17990af8-cb17-371c-9a8e-215e0e201902",
			Name:       "Generic Suite",
			Framework:  "",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    3,
				Passed:   3,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "success",
			StatusMessage: "",
			Suites: []parser.Suite{
				{
					ID:         "b088d75b-c907-3ac1-9f80-489cfacb1619",
					Name:       "foo",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    3,
						Passed:   3,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "ef10d448-a91f-32a7-8fc3-fd5172c721a1",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "e4bc6441-fb93-34ea-997b-01ef03694739",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "ef10d448-a91f-32a7-8fc3-fd5172c721a1",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
			},
		},
		"multi-suite": {
			ID:         "cd9c81c6-06c6-3623-b337-6819885fbfe8",
			Name:       "ff",
			Framework:  "",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    10,
				Passed:   10,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "success",
			StatusMessage: "",
			Suites: []parser.Suite{
				{
					ID:         "b3d01848-18ba-3046-b1c9-8806a10742d6",
					Name:       "foo",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "02875c11-ed95-3c22-9dfa-e8b518cd0c7b",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "46540538-366f-38bb-a7ae-ad8ec6eb732c",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "b3d01848-18ba-3046-b1c9-8806a10742d6",
					Name:       "1234",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "02875c11-ed95-3c22-9dfa-e8b518cd0c7b",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "46540538-366f-38bb-a7ae-ad8ec6eb732c",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "b3d01848-18ba-3046-b1c9-8806a10742d6",
					Name:       "",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "02875c11-ed95-3c22-9dfa-e8b518cd0c7b",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "46540538-366f-38bb-a7ae-ad8ec6eb732c",
							File:      "",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "376e439f-2352-341a-8400-ff142935ddda",
					Name:       "1235",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "4f38be3c-b04b-35cb-8a24-fdb6b25fed01",
							File:      "foo/bar:123",
							Classname: "",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "87130424-6a9f-3363-81d0-8094bb06d2da",
							File:      "foo/baz",
							Classname: "",
							Package:   "",
							Name:      "baz",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
				{
					ID:         "db748ed5-c393-3a56-85b1-12fbedbf9c46",
					Name:       "diff by classname",
					IsSkipped:  false,
					IsDisabled: false,
					Timestamp:  "",
					Hostname:   "",
					Package:    "",
					Properties: parser.Properties(nil),
					Summary: parser.Summary{
						Total:    2,
						Passed:   2,
						Skipped:  0,
						Error:    0,
						Failed:   0,
						Disabled: 0,
						Duration: 0,
					},
					SystemOut: "",
					SystemErr: "",
					Tests: []parser.Test{
						{
							ID:        "15d634ab-2881-39ab-aa5c-2b9150b5b78d",
							File:      "foo/bar",
							Classname: "foo",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
						{
							ID:        "e6e5ef50-7e9a-31d1-b398-7293542604f3",
							File:      "foo/bar",
							Classname: "bar",
							Package:   "",
							Name:      "bar",
							Duration:  0,
							State:     "passed",
							Failure:   (*parser.Failure)(nil),
							Error:     (*parser.Error)(nil),
							SystemOut: "",
							SystemErr: "",
							SemEnv: parser.SemEnv{
								ProjectID:    "project-id",
								PipelineID:   "ppl-id",
								WorkflowID:   "wf-id",
								JobStartedAt: "job-creation-time",
								JobName:      "job-name",
								JobID:        "job-id",
								AgentType:    "agent-machine-type",
								AgentOsImage: "agent-machine-os-image",
								GitRefType:   "git-ref-type",
								GitRefName:   "",
								GitRefSha:    "",
							},
						},
					},
				},
			},
		},
		"invalid-root": {
			ID:         "",
			Name:       "",
			Framework:  "",
			IsDisabled: false,
			Summary: parser.Summary{
				Total:    0,
				Passed:   0,
				Skipped:  0,
				Error:    0,
				Failed:   0,
				Disabled: 0,
				Duration: 0,
			},
			Status:        "error",
			StatusMessage: "Invalid root element found: <nontestsuites>, must be one of <testsuites>, <testsuite>",
			Suites:        []parser.Suite{},
		},
	}

	testCases := buildParserTestCases(commonParserTestCases, parserWants)
	runParserTests(t, NewJUnitGeneric(), testCases)
}

func Test_JUnitGeneric_SpecificParse(t *testing.T) {
	specificParserTestCases := map[string]string{}
	parserWants := map[string]parser.TestResults{}

	testCases := buildParserTestCases(specificParserTestCases, parserWants)
	runParserTests(t, NewJUnitGeneric(), testCases)
}
