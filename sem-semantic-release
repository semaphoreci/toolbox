#!/usr/bin/env bash

set -euo pipefail

SEMANTIC_RELEASE_PLUGINS=()
SEMANTIC_RELEASE_OPTIONS=""
SEMANTIC_RELEASE_VERSION=""

semantic-release::parse_args() {
    local PARSING_PLUGINS=1
    local PARSING_BRANCHES=1
    local DRY_RUN=1

    local SEMANTIC_RELEASE_BRANCHES=()

    set -f

    while [[ $# -gt 0 ]]; do
        case $1 in
        --help)
            echo "Usage: sem-semantic-release [OPTION]...\n"
            echo "Options:"
            echo "  --dry-run   \t runs semantic-release without publishing version"
            echo "  --plugins   \t npm plugins and extensions to be installed"
            echo "  --branches  \t branches to run semantic release for"
            echo "  --version   \t semantic-release version"
            return 0;
            ;;

        --version)
            PARSING_PLUGINS=1
            PARSING_BRANCHES=1

            SEMANTIC_VERSION="$2"
            shift # past argument
            shift # past value
            ;;

        --plugins)
            PARSING_PLUGINS=0
            PARSING_BRANCHES=1
            shift
            ;;

        --branches)
            PARSING_PLUGINS=1
            PARSING_BRANCHES=0
            shift
            ;;

        --dry-run)
            DRY_RUN=0;
            shift
            ;;

        -*|--*)
            echo "sem-semantic-release: Unknown option $1"
            return 1
            ;;

        *)
            if [[ $PARSING_PLUGINS == 0 ]]; 
            then 
                SEMANTIC_RELEASE_PLUGINS+=($1); 
            fi
            if [[ $PARSING_BRANCHES == 0 ]]; 
            then
                SEMANTIC_RELEASE_BRANCHES+=($1);
            fi
            shift
            ;;
        esac
    done

    set +f

    if [[ $DRY_RUN -eq 0 ]]
    then 
        SEMANTIC_RELEASE_OPTIONS+="--dry-run "; 
    fi
    if [[ ${#SEMANTIC_RELEASE_BRANCHES[@]} -ne 0 ]]
    then
        SEMANTIC_RELEASE_OPTIONS+="--branches ${SEMANTIC_RELEASE_BRANCHES[@]} "
    fi


    if [[ $BATS ]]; then
        echo "semantic-release version: $SEMANTIC_VERSION"
        echo "semantic-release plugins: ${SEMANTIC_RELEASE_PLUGINS[@]}"
        echo "semantic-release options: $SEMANTIC_RELEASE_OPTIONS"
    fi
}

semantic-release::install() {
    if [[ -n $SEMANTIC_RELEASE_VERSION ]]
    then 
        SEMANTIC_RELEASE_PACKAGE="semantic-release@$SEMANTIC_RELEASE_VERSION"
    else 
        SEMANTIC_RELEASE_PACKAGE="semantic-release"
    fi
    
    npm install $SEMANTIC_RELEASE_PACKAGE --silent || 
        { echo "sem-semantic-release: Unsupported semantic-release version: $SEMANTIC_RELEASE_VERSION"; return 1; }
    
    if [[ ${#SEMANTIC_RELEASE_PLUGINS[@]} -ne 0 ]]
    then
        npm install ${SEMANTIC_RELEASE_PLUGINS[@]} --silent || 
            { echo "sem-semantic-release: Unable to install plugins: $SEMANTIC_RELEASE_PLUGINS"; return 1; }
    fi
}

semantic-release::scrape_version() {
    RELEASE_VERSION=$(cat /tmp/semantic-release.log | grep "The next release version" | grep -oE '([0-9]+\.[0-9]+\.[0-9]+)')
    
    if [[ -n $RELEASE_VERSION ]]
    then
        sem-context put RELEASE_VERSION=$RELEASE_VERSION
        echo "sem-semantic-release: RELEASE_VERSION=$RELEASE_VERSION"
    else
        echo "sem-semantic-release: RELEASE_VERSION not found"
    fi
}

sem-semantic-release() {
    semantic-release::parse_args $@
    semantic-release::install
    
    { npx semantic-release $SEMANTIC_RELEASE_OPTIONS; SEMANTIC_RELEASE_RESULT=$?; } | tee /tmp/semantic-release.log 
    if [[ $SEMANTIC_RELEASE_RESULT -ne 0 ]]; then return $SEMANTIC_RELEASE_RESULT; fi

    semantic-release::scrape_version
}

sem-semantic-release $@
