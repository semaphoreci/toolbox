#!/bin/bash

# Changing language versions
VERSION="0.7"
SUPPORTED_SOFTWARE=(elixir go java php ruby python node c cpp erlang scala firefox kubectl)

# Misc
DATE_FORMAT='%H:%M %d/%m/%Y'
TOTAL_TIME=0

################################################################################
# Generic function which executes the passed 'command' to switch the version
# Globals:
#   language, language_version
# Arguments:
#   command
# Returns:
#  0, 1-127 (exit status of the language manager command)

version::metrics() {
  local cmd=$@
  local software=${1#"version::change_"}
  local version=$2
  local start
  local end
  local duration
  [ "$(uname)" == "Linux" ] && start=$(date +%s%3N)
  [ "$(uname)" == "Darwin" ] && start=$(gdate +%s%3N)
  $cmd
  ch_status=$?
  [ "$(uname)" == "Linux" ] && end=$(date +%s%3N)
  [ "$(uname)" == "Darwin" ] && end=$(gdate +%s%3N)
  TOTAL_TIME=$(( $end - $start ))
  return $ch_status
}
version::change() {
  command=$1
  version::log "Changing '${software}' to version ${software_version}"
  eval $command $software_version
  ch_status=$?
  return $ch_status
}
version::change_ruby() {
  [[ "$software_version" == "2.5" ]] && software_version="2.5.9"
  [[ "$software_version" == "2.6" ]] && software_version="2.6.10"
  [[ "$software_version" == "2.7" ]] && software_version="2.7.6"
  [[ "$software_version" == "3.0" ]] && software_version="3.0.4"
  [[ "$software_version" == "3.1" ]] && software_version="3.1.2"

  if ! [ -d ~/.rbenv/versions/"${software_version}" ]; then
    sem-install ruby "${software_version}"
  fi
  [ "${2:-}" = "-f" ] && change_cmd="rbenv shell" || change_cmd="rbenv global"
  version::change "$change_cmd"
  return $?
}
version::change_node() {
  version::change "sem-install node"
  return $?
}
version::change_elixir() {
  [[ "$software_version" == "1.7" ]] && software_version="1.7.4"
  [[ "$software_version" == "1.8" ]] && software_version="1.8.2"
  [[ "$software_version" == "1.9" ]] && software_version="1.9.4"
  [[ "$software_version" == "1.10" ]] && software_version="1.10.4"
  [[ "$software_version" == "1.11" ]] && software_version="1.11.4"
  [[ "$software_version" == "1.12" ]] && software_version="1.12.3"
  [[ "$software_version" == "1.13" ]] && software_version="1.13.4"
  [[ "$software_version" == "1.14" ]] && software_version="1.14.1"

  if [[ $(kiex list) != *"${software_version}"* ]];then
    sem-install elixir "${software_version}"
  fi
  version::change "kiex use"
  return $?
}
version::change_go() {
  version::change "change-go-version"
  ret=$?
  [[ "$ret" == "0" ]] && export PATH="$(go env GOPATH)/bin:${PATH}"
  return $ret
}
version::change_java() {
  version::change "change-java-version"
  return $?
}
version::change_php() {
  [[ "$software_version" == "7.0" ]] && software_version="7.0.33"
  [[ "$software_version" == "7.1" ]] && software_version="7.1.33"
  [[ "$software_version" == "7.2" ]] && software_version="7.2.34"
  [[ "$software_version" == "7.3" ]] && software_version="7.3.33"
  [[ "$software_version" == "7.4" ]] && software_version="7.4.32"
  [[ "$software_version" == "8" ]] && software_version="8.0.24"
  [[ "$software_version" == "8.0" ]] && software_version="8.0.24"

  if ! [ -d ~/.phpbrew/php/php-"${software_version}" ]; then
    sem-install php "${software_version}"
  fi
  software_version="php-${software_version}"
  version::change "phpbrew switch"
  return $?
}
version::change_python() {
  version::change "change-python-version"
  return $?
}
version::change_c() {
  version::change "change-gcc-version"
  return $?
}
version::change_cpp() {
  version::change "change-gcc-version"
  return $?
}
version::change_scala() {
  version::change "change-scala-version"
  return $?
}
version::change_erlang() {
  [[ "$software_version" == "20" ]] && software_version="20.3"
  [[ "$software_version" == "21" ]] && software_version="21.3"
  [[ "$software_version" == "22" ]] && software_version="22.3"
  [[ "$software_version" == "23" ]] && software_version="23.3"
  [[ "$software_version" == "24" ]] && software_version="24.3"
  [[ "$software_version" == "25" ]] && software_version="25.1"

  if [[ $(kerl list installations) != *"${software_version}"* ]]; then
    sem-install erlang "${software_version}"
  fi
  version::change "change-erlang-version"
  return $?
}
version::change_firefox() {
  version::change "change-firefox-version"
  return $?
}
version::change_kubectl() {
  curl --silent -LO https://storage.googleapis.com/kubernetes-release/release/v"$software_version"/bin/linux/amd64/kubectl
  if test -f "kubectl"; then
    chmod +x ./kubectl
    sudo mv -f kubectl /usr/bin/
  fi
  version::change "kubectl version --client | grep -q "
  return $?
}
version::change_flutter() {
  local local_version=$(ls -1d /opt/flutter_${software_version}* | tail -1)
  if test -d ${local_version}; then
    rm -f /opt/flutter && ln -s ${local_version}  /opt/flutter
    version::change "/opt/flutter/bin/flutter --version | grep "
    return $?
  else
    echo -e "
###############################################################################
    Flutter version ${software_version} not installed or not a container.
"
    return 1
  fi
}
################################################################################
# End of software manager wrappers
################################################################################


################################################################################
# Prints the usage
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
version::usage() {
  echo -e "
################################################################################
sem-version ${VERSION} | Utility to change a selected software active version

Usage:
  sem-version software version
################################################################################"
}

################################################################################
# Helper to print date in the given format
# Globals:
#   DATE_FORMAT
# Arguments:
#   message
# Returns:
#   none
################################################################################
version::date() {
  date +"${DATE_FORMAT}"
}

################################################################################
# Helper to display info messages
# Globals:
#   none
# Arguments:
#   message
# Returns:
#   none
################################################################################
version::log() {
  echo -e "\n[$(version::date)]: $@" >&2
}

################################################################################
# Helper function to show error messages and to terminate execution on error
# Globals:
#   DATE_FORMAT
# Arguments:
#   message
# Returns:
#   1
################################################################################
version::err() {
  echo -e "\n! [$(version::date)]: $@" >&2

  return 1
}

################################################################################
# The main entrypoint to the script. Holds the switching logic.
# Globals:
#   SUPPORTED_SOFTWARE
# Arguments:
#   'software', 'version'
# Returns:
#   none
################################################################################
version::main() {
  if ! [[ $# -ge 2 ]]; then
    version::usage
    version::err "Unsupported number of arguments provided!"

    return $?
  fi

  software=$1
  software_version=$2
  force=${3:-""}
  ignore=${4:-""}

  if [[ "$force" == "-i" ]] || [[ "$force" == "--ignore" ]]; then
    ignore="--ignore"
    force=""
  fi
  if [[ "$ignore" == "-i" ]]; then
    ignore="--ignore"
  fi

  fn_name="version::change_${software}"

  if ! [[ $(type -t $fn_name) == function ]]; then
    version::err "Function '${fn_name}' not implemented. Software '${software}' might not be supported."
    return 1
  else
    version::metrics version::change_${software} $software_version $force
    fn_status=$?
    if [[ fn_status -ne 0 ]]; then
      version::err "Failed to switch version.\n"
      echo "semversion,software=$software,state=fail,version=$software_version duration=$TOTAL_TIME" >> /tmp/toolbox_semversion
      [[ "$ignore" == "--ignore" ]] || exit 1
    else
      echo "semversion,software=$software,state=success,version=$software_version duration=$TOTAL_TIME" >> /tmp/toolbox_semversion
      version::log "Switch successful."
    fi
    return 0
  fi
}

sem-version() {
  if [[ "$(uname)" == "Darwin" ]]; then
    if [[ "$1" == 'ruby' ]] || [[ "$1" == 'node' ]]; then
      version::main "$@"
    else
      echo "`sem-version` is not supported in this environment."
      echo "https://docs.semaphoreci.com/ci-cd-environment/sem-version-managing-language-versions-on-linux"
      exit 1
    fi
  else
    version::main "$@"
  fi
}
