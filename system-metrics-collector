#!/bin/sh

#
# Simple log system metrics collector. Polls the system state every 1s and
# saves the result to /tmp/system-metrics.
#
# The simple nature of the script allows it to seemlesly run in any Linux based
# VM, Docker image, or on a MacVM host.
#
# The recommended way to start the script is to run it in the background.
#
#   $ system-metrics-collector &
#
# The resulting file's format is the following:
#
#   $ cat /tmp/system-metrics-collector
#
#     Mon May 18 14:50:58 UTC 2020 | cpu: 6% , mem:   5.03% , system_disk 1% , docker_disk: 1% , shared_memory 1% 
#     Mon May 18 14:51:28 UTC 2020 | cpu: 4% , mem:   5.03% , system_disk 1.9% , docker_disk: 11% , shared_memory 41% 
#
# Jobs that run for an hour collect around 120 log lines. This should be safe
# and not introduce any performance of disk usage problems.
#
DIST="`uname`"
SYSTEM_DISK_LOCATION="/"
DOCKER_DISK_LOCATION="/`[ -d /var/lib/docker ] && echo 'var/lib/docker'`"
OUTPUT="/tmp/system-metrics"

memFree(){
  freeMem=-1
  case "$DIST" in
    "Linux")
      freeMem=`free | grep Mem | awk '{ printf("%6.2f%%\n", ($3/$2 * 100.0)) }'`
      ;;
    "Darwin")
      freeMem=`memory_pressure | grep 'percentage' | tr -d '%'|awk '{print 100-$NF"%"}'`
      ;;
    *)
      ;;
  esac
  echo $freeMem
}
sharedMemory(){
  sharedMem=0
  case "$DIST" in
    "Linux")
      sharedMem=`free -m | grep Mem | awk '{ print $5 }'`
      ;;
    "Darwin")
      sharedMem=0
      ;;
    *)
      ;;
  esac
  echo $sharedMem
}
cpuUsage(){
  usedCpu=-1
  case "$DIST" in
    "Linux")
      usedCpu=`ps L | grep -q '%cpu' && ps -A -o %cpu 2>/dev/null | awk '{s+=$1} END {print s "%"}'`
      ;;
    "Darwin")
      usedCpu=`top -i 1 -l 1 -stats CPU | grep CPU | grep idle |tr -d '%'| awk '{print 100-$7"%"}'`
      ;;
    *)
      ;;
  esac
  echo $usedCpu
}
diskUsage(){
  disk=$1
  usedDisk=-1
  case "$DIST" in
    "Linux")
      usedDisk=`df "$disk" | sed 1d | awk '{ printf("%6.2f%%\n", ($3/$2 * 100.0)) }'`
      ;;
    "Darwin")
      usedDisk=`df / | sed 1d | awk '{print $5}'`
      ;;
    *)
      ;;
  esac
  echo $usedDisk
}

while true; do
  MEMORY="`memFree`"
  SHARED_MEMORY="`sharedMemory`"
  SYSTEM_DISK="`diskUsage ${SYSTEM_DISK_LOCATION}`"
  DOCKER_DISK="`diskUsage ${DOCKER_DISK_LOCATION}`"
  CPU_USAGE="`cpuUsage`"
  echo `date +"%a %b %d %T %Z %Y"`" |  cpu: ${CPU_USAGE},  mem: ${MEMORY},  system_disk: ${SYSTEM_DISK},  docker_disk: ${DOCKER_DISK},  shared_memory: ${SHARED_MEMORY} M" >> $OUTPUT
  sleep 1
done
